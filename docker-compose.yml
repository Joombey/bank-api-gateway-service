services:
  bank:
    image: bank-app
    container_name: bank
    networks:
      - bank-service
      - microservice
      - monitoring
    depends_on:
      bank-db: 
        condition: service_healthy
    # ports:
    #   - 8081:8080
  
  bank-db:
    container_name: bank-db
    image: mariadb:11.3.1-rc-jammy
    environment:
      - MARIADB_ROOT_PASSWORD=root
      - MARIADB_USER=root
      - MARIADB_DATABASE=maria_db
    networks:
      - bank-service
    volumes:
      - bank-db-volume:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 10s
      interval: 2s
      retries: 10

  profile:
    image: profile-app
    networks:
      - profile-service
      - microservice
      - monitoring
    depends_on:
      bank: 
        condition: service_started
      profile-db:
        condition: service_healthy
    # ports:
    #   - 8082:8080
  
  profile-db:
    image: mariadb:11.3.1-rc-jammy
    environment:
      - MARIADB_ROOT_PASSWORD=root
      - MARIADB_USER=root
      - MARIADB_DATABASE=maria_db
    networks:
      - profile-service
    volumes:
      - profile-db-volume:/var/lib/mysql
    healthcheck:
        test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
        start_period: 10s
        interval: 2s
        retries: 10
  
  postgresql:
    image: docker.io/bitnami/postgresql:15
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_keycloak
      - POSTGRESQL_DATABASE=bitnami_keycloak
    networks:
      - keycloak_net
    volumes:
      - 'postgresql_data:/bitnami/postgresql'

  keycloak:
    image: docker.io/bitnami/keycloak:22
    environment:
      - KEYCLOAK_ADMIN_USER=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    depends_on:
      - postgresql
    networks:
      - keycloak_net
    ports:
      - "8086:8080"

  apigate:
    image: apigate
    depends_on:
      - keycloak
      - bank
      - profile
    ports:
      - 8080:8080
    networks:
      - keycloak_net
      - microservice
      - monitoring
      - tracing

  prometheus:
    image: "prom/prometheus"
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    networks:
      - monitoring
  jaeger:
    image: jaegertracing/all-in-one
    networks:
      - tracing
    ports:
      - "16686:16686"

volumes:
  postgresql_data:
    driver: local
  bank-db-volume:
  profile-db-volume:
networks:
  keycloak_net:
  bank-service:
  profile-service:
  microservice:
  monitoring:
  tracing: